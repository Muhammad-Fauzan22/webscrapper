name: Autonomous Scraper Swarm
on:
  schedule:
    - cron: "*/15 * * * *"  # Run every 15 minutes
  workflow_dispatch:
    inputs:
      shard_count:
        description: 'Number of shards to run'
        required: false
        default: 4
        type: number
      topic:
        description: 'Research topic'
        required: false
        default: 'renewable energy in ASEAN'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  swarm-execution:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        shard: ${{ fromJson(needs.setup.outputs.shard_matrix) }}
    needs: setup
    env:
      PYTHONUNBUFFERED: 1
      DEBUG_MODE: 0
      TZ: Asia/Jakarta
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt
          playwright install chromium
          playwright install-deps

      - name: Set timezone
        run: sudo timedatectl set-timezone $TZ

      - name: Run AI Swarm
        env:
          GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER }}
          GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
          GOOGLE_CLIENT_EMAIL: ${{ secrets.GOOGLE_CLIENT_EMAIL }}
          GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
          MONGO_CONN_STR: ${{ secrets.MONGO_CONN_STR }}
          MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
          MONGO_COLLECTION: ${{ secrets.MONGO_COLLECTION }}
          DEEPSEEK_KEY: ${{ secrets.DEEPSEEK_KEY }}
          PERPLEXITY_KEY: ${{ secrets.PERPLEXITY_KEY }}
          CLAUDE_KEY: ${{ secrets.CLAUDE_KEY }}
          CYPHER_KEY: ${{ secrets.CYPHER_KEY }}
          GEMMA_KEY: ${{ secrets.GEMMA_KEY }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          SCRAPEOPS_API_KEY: ${{ secrets.SCRAPEOPS_API_KEY }}
          AIML_API_KEY: ${{ secrets.AIML_API_KEY }}
        run: |
          # Convert private key to multiline format
          echo "$GOOGLE_PRIVATE_KEY" | sed 's/\\n/\n/g' > service_account.json
          
          # Run swarm with sharding
          python -m swarm.core \
            --shard ${{ matrix.shard }} \
            --topic "${{ needs.setup.outputs.topic }}" \
            --workers ${{ needs.setup.outputs.worker_count }}

      - name: Upload diagnostics
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: shard-${{ matrix.shard }}-diagnostics
          path: |
            logs/
            diagnostics/
            *.log
          retention-days: 3

      - name: Notify Discord
        if: ${{ failure() }}
        uses: Ilshidur/action-discord@master
        with:
          args: "Scraper shard ${{ matrix.shard }} failed! View logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

  setup:
    runs-on: ubuntu-latest
    outputs:
      shard_matrix: ${{ steps.set-shards.outputs.shard_matrix }}
      topic: ${{ inputs.topic }}
      worker_count: ${{ steps.calc-workers.outputs.worker_count }}
    steps:
      - name: Calculate shard matrix
        id: set-shards
        run: |
          SHARD_COUNT=${{ github.event.inputs.shard_count || 4 }}
          SHARTS=$(seq -s ',' 1 $SHARD_COUNT)
          echo "shard_matrix=[$SHARTS]" | tee $GITHUB_OUTPUT
          
      - name: Calculate worker count
        id: calc-workers
        run: |
          # Get current UTC hour (0-23)
          HOUR=$(date -u +%H)
          
          # Daytime: 8am-10pm (high resources), Night: 10pm-8am (low resources)
          if [ $HOUR -ge 8 ] && [ $HOUR -lt 22 ]; then
            WORKERS=6
          else
            WORKERS=3
          fi
          echo "worker_count=$WORKERS" | tee $GITHUB_OUTPUT

  report:
    needs: [setup, swarm-execution]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate summary report
        run: |
          # Calculate success rate
          SUCCESS_COUNT=${{ needs.swarm-execution.result == 'success' && length(needs.swarm-execution.outputs) || 0 }}
          TOTAL_SHARDS=${{ fromJson(needs.setup.outputs.shard_matrix) }}
          SUCCESS_RATE=$(( (SUCCESS_COUNT * 100) / ${#TOTAL_SHARDS[@]} ))
          
          echo "Scraping Summary" >> report.md
          echo "=================" >> report.md
          echo "- Topic: ${{ needs.setup.outputs.topic }}" >> report.md
          echo "- Shards: ${#TOTAL_SHARDS[@]}" >> report.md
          echo "- Success Rate: $SUCCESS_RATE%" >> report.md
          echo "- Workers per shard: ${{ needs.setup.outputs.worker_count }}" >> report.md
          echo "- Completed at: $(date)" >> report.md
          
          # Add MongoDB stats if available
          if [ -n "$MONGO_CONN_STR" ]; then
            echo "MongoDB Stats" >> report.md
            echo "-------------" >> report.md
            echo "- Total documents: $(mongo_stats --count)" >> report.md
          fi

      - name: Upload report
        uses: actions/upload-artifact@v3
        with:
          name: scraping-summary
          path: report.md

      - name: Send success notification
        if: ${{ success() }}
        uses: Ilshidur/action-discord@master
        with:
          args: "Scraping completed successfully! ${{ needs.swarm-execution.result.success_count }} items collected. View summary: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
